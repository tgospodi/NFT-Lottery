// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;

import {TicketProxy} from "./TicketProxy.sol";
import {TicketInterface} from "./interfaces/TicketInterface.i.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

/**
 * @title TicketFactory
 * @author Todor Gospodinov
 * @notice TicketFactory contract deploys new lottery ticket contracts
 */

contract TicketFactory is Ownable {
    address public beacon;
    // address public owner;
    address public draftAddress;

    event NewLotteryDeployed(address indexed draftAddress, address indexed owner);

    constructor(address _beacon) Ownable(msg.sender) {
        beacon = _beacon;
    }

    /**
     * @notice Deploys new lottery ticket contract using the Create2 opcode
     * @param name_  The name of the token.
     * @param symbol_  The symbol used to display the token.
     * @param _startTimestamp The timestamp when the lottery starts.
     * @param _endTimestamp  The timestamp when the lottery ends.
     * @param _ticketPrice  The price of a ticket.
     * @param _draftAddress  The address of the draft contract.
     * @notice The salt is generated by hashing the owner address, name and symbol of the lottery
     */
    function deployTicketProxy(
        string calldata name_,
        string calldata symbol_,
        uint256 _startTimestamp,
        uint256 _endTimestamp,
        uint128 _ticketPrice,
        address _draftAddress
    ) external onlyOwner returns (address) {
        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, name_, symbol_));
        address ticketProxy = address(new TicketProxy{salt: _salt}(beacon));

        TicketInterface(ticketProxy).initialize(
            name_, symbol_, _startTimestamp, _endTimestamp, _ticketPrice, _draftAddress
        );

        emit NewLotteryDeployed(ticketProxy, msg.sender);

        return ticketProxy;
    }
}
